<div class="go-back-link">
  {{#link-to 'index'}}Back to index{{/link-to}}
</div>

<h1>ContextMenuComponent</h1>

<div class="panel">

  <h2><code>&#123;&#123;uic-context-menu&#125;&#125;</code></h2>

  <h2>Description</h2>

  <p>The ContextMenuComponent can be used to provide a context menu for elements or components.</p>

  {{#uic-context-menu to="menu-container" tagName="div" as |contextMenuParams|}}

      <menuitem {{action "edit"}}>Edit</menuitem>
      {{#uic-sub-menu title="Sub Menu..."}}
        <menuitem {{action "new"}}>New...</menuitem>
        <menuitem {{action "edit"}}>Do more stuff...</menuitem>
        <menuitem {{action "edit"}}>Do more stuff...</menuitem>
        <menuitem {{action "edit"}}>Do more stuff...</menuitem>
      {{/uic-sub-menu}}
      <menuitem {{action "edit"}} disabled>Disabled...</menuitem>
      <menuitem {{action "edit"}}>Do more stuff...</menuitem>


    {{#if contextMenuParams.event.altKey}}
      <hr />
      <menuitem {{action "delete"}}>Delete</menuitem>
    {{/if}}
  {{else}}
    <div class="panel">
      <p>Right-click inside the panel.</p>
      <p>Try right-click while holding ALT</p>
    </div>
  {{/uic-context-menu}}

</div>

<div class="panel">

  <h2>Usage:</h2>

  <p>
    Place a <code>&#123;&#123;uic-context-menu&#125;&#125;</code> component in your template and give it a unique <code>id</code>:
  </p>

  {{code-panel name="context-menu-basic.hbs"}}

  <p>
    To open the context menu there is a helper called <code>&#123;&#123;open-context-menu&#125;&#125;</code> which
    takes the <code>id</code> of the context menu as the first argument.
    <code>&#123;&#123;open-context-menu "my-context-menu"&#125;&#125;</code>
  </p>
  <p>
    The <code>&#123;&#123;open-context-menu&#125;&#125;</code> helper returns a function which can be used
    in actions.
  </p>

  {{code-panel name="context-menu-action-element.hbs"}}

  or in a component..

  {{code-panel name="context-menu-action-component.hbs"}}

  <p>
    Alternatively, you can also place the trigger content in the <code>else</code> block of the <code>ContextMenuComponent</code>.
  </p>

  {{code-panel name="context-menu-trigger.hbs"}}

</div>

<div class="panel">

  <h2>Menu items</h2>

  <p>You can use <code>menuitem</code> elements:</p>

  {{code-panel name="contextmenu-menuitem-example.hbs"}}

  <div class="panel output">

{{! BEGIN-SNIPPET contextmenu-menuitem-example }}
{{#uic-context-menu}}

  <menuitem>Do something...</menuitem>
  <menuitem>Do something else...</menuitem>

{{else}}
  Right Click here
{{/uic-context-menu}}
{{! END-SNIPPET }}

  </div>

  <p>You can also create menu items using <code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code> elements:</p>

  {{code-panel name="contextmenu-li-example.hbs"}}

  <div class="panel output">

{{! BEGIN-SNIPPET contextmenu-li-example }}
{{#uic-context-menu}}

  <ul>
    <li>Do something...</li>
    <li>Do something...</li>
  </ul>

{{else}}
  Right Click here
{{/uic-context-menu}}
{{! END-SNIPPET }}

  </div>

  <p>You can add <code>hr</code> elements to divide the context menu into sections:</p>

  {{code-panel name="contextmenu-hr-example.hbs"}}

  <div class="panel output">

{{! BEGIN-SNIPPET contextmenu-hr-example }}
{{#uic-context-menu}}

  <menuitem>Do something...</menuitem>
  <hr />
  <menuitem>Do something else...</menuitem>

{{else}}
  Right Click here
{{/uic-context-menu}}
{{! END-SNIPPET }}

  </div>

</div>

<div class="panel">

  <h2>Sub-menu</h2>

  <p>To create a sub-menu, use the <code>SubMenuComponent</code>:</p>

  {{code-panel name="contextmenu-submenu.hbs"}}

  <p>
    The <code>SubMenuComponent</code> example above should be placed inside a
    <code>ContextMenuComponent</code> in place of a menuitem.
  </p>

  {{code-panel name="contextmenu-submenu-example.hbs"}}
  <div class="panel output">

{{! BEGIN-SNIPPET contextmenu-submenu-example }}
{{#uic-context-menu}}
  <menuitem>Do something...</menuitem>
  {{#uic-sub-menu title="My Sub-menu"}}
    <menuitem>Sub-menu item...</menuitem>
    <menuitem>Another item</menuitem>
  {{/uic-sub-menu}}
  <menuitem>Do something else...</menuitem>
{{else}}
  Right Click here
{{/uic-context-menu}}

{{! END-SNIPPET }}
  </div>

</div>

<div class="panel">

  <h2>ContextMenuParams</h2>

  <p>
    The <code>ContextMenuComponent</code> template yields a block parameter
    object that provides us with some useful properties.
  </p>

  <p>
    The following context menu parameters are available to the block template:
  </p>

  <h3>Event</h3>

  <p>This is the <code>event</code> object that triggered the context menu.</p>

  <div class="panel code">
    <pre><code>&#123;&#123;#uic-context-menu <b>as |params|</b>&#125;&#125;
  &lt;menuitem &#123;&#123;action "edit" <b>params.event</b>&#125;&#125;>Edit&lt;/menuitem>
&#123;&#123;/uic-context-menu&#125;&#125;</code></pre>
  </div>

  The following example uses the <code>params.event.altKey</code> property to
  display an extra menu item when the Alt key is pressed.

  <div class="panel code">
    <pre><code>&#123;&#123;#uic-context-menu <b>as |params|</b>&#125;&#125;
  &lt;menuitem &#123;&#123;action "edit"&#125;&#125;>Edit&lt;/menuitem>

  &#123;&#123;#if <b>params.event.altKey</b>}}
    &lt;menuitem &#123;&#123;action "delete" &#125;&#125;>Delete&lt;/menuitem>
  &#123;&#123;/if}}

&#123;&#123;/uic-context-menu&#125;&#125;</code></pre>
  </div>

  {{#uic-context-menu as |contextMenuParams|}}
    <menuitem {{action "edit"}}>Edit</menuitem>
    {{#if contextMenuParams.event.altKey}}
      <menuitem {{action "delete"}}>Delete</menuitem>
    {{/if}}
  {{else}}
    <div class="panel">
      <p>Right-click inside the panel.</p>
      <p>Try right-click while holding ALT</p>
    </div>
  {{/uic-context-menu}}

  <h3>Context</h3>

  The <code>context</code> property is the closest component to the <code>event.currentTarget</code> element.

  <div class="panel code">
    <pre><code>&#123;&#123;#uic-context-menu <b>as |params|</b>&#125;&#125;
  &lt;menuitem &#123;&#123;action "doSomething" <b>params.context</b>&#125;&#125;>Do something...&lt;/menuitem>
&#123;&#123;/uic-context-menu&#125;&#125;</code></pre>
  </div>

  <p>
    In the following example we have a template with a list, and a context-menu
    component that we want to use for each item in the list.  The context-menu
    component needs to have a reference to the model passed to the list-item component.
  </p>

  <div class="panel code">
    <pre><code>// components/list.hbs

&#123;&#123;#each list as |item|&#125;&#125;
  &#123;&#123;list-item <b>model=item</b> contextMenu=(open-context-menu "list-item-context-menu")&#125;&#125;
&#123;&#123;/each&#125;&#125;

&#123;&#123;#uic-context-menu id="list-item-context-menu" <b>as |params|</b>&#125;&#125;
  &lt;menuitem &#123;&#123;action "doSomething" <b>params.context.model</b>&#125;&#125;>Do something...&lt;/menuitem>
&#123;&#123;/uic-context-menu&#125;&#125;</code></pre>
  </div>

  <p>
    The <code>params.context</code> object is a reference to the <code>list-item</code>
    component, and that gives us access to the <code>model</code> property on that component.
  </p>

  <div class="panel code">
    <pre><code>// components/list.js

import Ember from "Ember";

export default Ember.Component.extend({

  list: Ember.A([ ... ]),

  actions: {

    <b>doSomething(model) {</b>
      // <code>model</code> is the item in the list that was right-clicked.
    <b>}</b>

  }
});
</code></pre>
  </div>

  <h3>Model</h3>

  <p>
    If the element doesn't have a component, then the <code>context</code> property
    will be less helpful.
  </p>
  <p>
    In cases like this you can pass the <code>model</code> as the second argument
    to the <code>open-context-menu</code> helper which will then be available to
    the context menu as <code>params.model</code>.
  </p>

  <div class="panel code">
    <pre><code>
  &#123;&#123;#each array as <b>model</b>&#125;&#125;
    &lt;div oncontextmenu=&#123;&#123;open-context-menu "item-menu" <b>model</b>&#125;&#125;>&#123;&#123;model.name&#125;&#125;&lt;/div>
  &#123;&#123;/each&#125;&#125;

  &#123;&#123;#uic-context-menu id="item-menu" as |params|&#125;&#125;
    &lt;menuitem &#123;&#123;action "doSomething" <b>params.model</b>&#125;&#125;>Do something...&lt;/menuitem>
  &#123;&#123;/uic-context-menu&#125;&#125;
</code></pre>
  </div>


</div>

<div class="panel">

  <h2>Destination element</h2>

  <p>
    The <code>ContextMenuComponent</code> can be rendered into another DOM element
    using <a href="https://github.com/yapplabs/ember-wormhole"><code>ember-wormhole</code></a>.
  </p>
  <p>Add a html element to the DOM and give it a unique <code>id</code></p>

  {{code-panel name="menu-container.hbs"}}

  <p>
    Then specify the element id to the <code>to</code> property of the <code>ContextMenuComponent</code>.
  </p>


  {{code-panel name="menu-container-example.hbs"}}

  {{#uic-context-menu to="menu-container"}}
    <menuitem {{action "edit"}}>Edit</menuitem>
  {{else}}
    <p class="panel">Right-click inside the panel.</p>
  {{/uic-context-menu}}

  <p>
    For more information on <code>ember-wormhole</code>, click <a href="https://github.com/yapplabs/ember-wormhole">here</a>.
  </p>
</div>

<div class="panel">

  {{#uic-context-menu tagName="div" as |contextMenuParams|}}
    <ul>
      <li {{action "edit"}}>Edit</li>
      {{#uic-sub-menu title="Sub Menu..." tagName="li"}}
        <ul>
          <li {{action "new"}}>New...</li>
          <li {{action "edit"}}>Do more stuff...</li>
          <li {{action "edit"}}>Do more stuff...</li>
          <li {{action "edit"}}>Do more stuff...</li>
        </ul>
      {{/uic-sub-menu}}
      <li {{action "edit"}} disabled>Disabled...</li>
      <li {{action "edit"}}>Do more stuff...</li>

    </ul>
    {{#if contextMenuParams.event.altKey}}
      <hr />
      <ul>
        <li {{action "delete"}}>Delete</li>
      </ul>
    {{/if}}
  {{else}}
    <div class="panel">
      <p>Right-click inside the panel.</p>
      <p>Try right-click while holding ALT</p>
    </div>
  {{/uic-context-menu}}

  <div class="panel" {{action (open-context-menu "c-menu") on="contextMenu"}}>
    <p>Right-click inside the panel.</p>
  </div>

  <div class="panel" oncontextmenu={{open-context-menu "a-menu"}}>
    <p>Right-click inside the panel.</p>
  </div>

  <div class="panel" oncontextmenu={{open-context-menu "b-menu"}}>
    <p>Right-click inside the panel.</p>
    <p>Try right-click while holding ALT</p>
  </div>

</div>

{{#uic-context-menu id="a-menu"}}
  <menuitem {{action "doSomething"}}>Do something</menuitem>
  <hr />
  {{#uic-sub-menu title="Sub Menu..."}}
    <ul>
      <li {{action "new"}}>New...</li>
      <li {{action "edit"}}>Do more stuff...</li>
      <li disabled>Disabled...</li>
      <li {{action "edit"}}>Do more stuff...</li>
    </ul>
  {{/uic-sub-menu}}
  <menuitem {{action "doSomethingElse"}}>Do something else</menuitem>
{{/uic-context-menu}}

{{#uic-context-menu id="b-menu" as |contextMenuParams|}}
  <menuitem {{action "doSomething"}}>Do something</menuitem>
  <hr />
  {{#uic-sub-menu title="Sub Menu..."}}
    <menuitem {{action "new"}}>New...</menuitem>
    <menuitem {{action "edit"}}>Do more stuff...</menuitem>
    <menuitem {{action "edit"}} disabled>Disabled...</menuitem>
    <menuitem {{action "edit"}}>Do more stuff...</menuitem>
  {{/uic-sub-menu}}
  <menuitem {{action "doSomethingElse"}}>Do something else</menuitem>
  {{#if contextMenuParams.event.altKey}}
    <menuitem {{action "edit"}}>Do more stuff...</menuitem>
  {{/if}}
{{/uic-context-menu}}

{{#uic-context-menu id="c-menu"}}
  <ul>
    <li {{action "edit" bubbles=true}}>Edit</li>
  </ul>
{{/uic-context-menu}}
